snippet comm
	(comment
		${0})
endsnippet

snippet condp
	(condp ${1:pred} ${2:expr}
		${0})
endsnippet

snippet def
	(def ${0})
endsnippet

snippet defm
	(defmethod ${1:multifn} "${2:doc-string}" ${3:dispatch-val} [${4:args}]
		${0:code})
endsnippet

snippet defmm
	(defmulti ${1:name} "${2:doc-string}" ${0:dispatch-fn})
endsnippet

snippet defma
	(defmacro ${1:name} "${2:doc-string}" ${0:dispatch-fn})
endsnippet

snippet defn
	(defn ${1:name} "${2:doc-string}" [${3:arg-list}]
		${0:code})
endsnippet

snippet defp
	(defprotocol ${1:name}
		${0:code})
endsnippet

snippet defr
	(defrecord ${1:name} [${2:fields}]
		${3:protocol}
		${0:code})
endsnippet

snippet deft
	(deftest ${1:name}
		(is (= ${0:assertion})))
endsnippet

snippet is
	(is (= ${1} ${0}))
endsnippet

snippet defty
	(deftype ${1:Name} [${2:fields}]
		${3:Protocol}
		${0:code})
endsnippet

snippet doseq
	(doseq [${1:elem} ${2:coll}]
		${0:code})
endsnippet

snippet fn
	(fn [${1:arg-list}] ${0:code})
endsnippet

snippet if
	(if ${1:test-expr}
		${2:then-expr}
		${0:else-expr})
endsnippet

snippet if-let
	(if-let [${1:result} ${2:test-expr}]
		(${3:then-expr} $1)
		(${0:else-expr}))
endsnippet

snippet imp
	(:import [${1:package}])
		& {:keys [${1:keys}] :or {${0:defaults}}}
endsnippet

snippet let
	(let [${1:name} ${2:expr}]
		${0:code})
endsnippet

snippet letfn
	(letfn [(${1:name}) [${2:args}]
		${0:code})])
endsnippet

snippet map
	(map ${1:func} ${0:coll})
endsnippet

snippet mapl
	(map #(${1:lambda}) ${0:coll})
endsnippet

snippet met
	(${1:name} [${2:this} ${3:args}]
		${0:code})
endsnippet

snippet ns
	(ns ${0:name})
endsnippet

snippet dotimes
	(dotimes [_ 10]
		(time
			(dotimes [_ ${1:times}]
				${0:code})))
endsnippet

snippet pmethod
	(${1:name} [${2:this} ${0:args}])
endsnippet

snippet refer
	(:refer-clojure :exclude [${0}])
endsnippet

snippet require
	(:require [${1:namespace} :as [${0}]])
endsnippet

snippet use
	(:use [${1:namespace} :only [${0}]])
endsnippet

snippet print
	(println ${0})
endsnippet

snippet reduce
	(reduce ${1:(fn [p n] ${3})} ${2})
endsnippet

snippet when
	(when ${1:test} ${0:body})
endsnippet

snippet when-let
	(when-let [${1:result} ${2:test}]
		${0:body})
endsnippet
